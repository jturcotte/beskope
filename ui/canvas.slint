import { VerticalBox, HorizontalBox } from "std-widgets.slint";

component SvgButton inherits Rectangle {
    in property source <=> i.source;
    in property<bool> flip: false;
    callback clicked();

    width: self.height;
    height: 36px;
    border-radius: self.width;
    i := Image {
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        width: 50%;
        height: 50%;
        colorize: #000c;
        rotation-angle: flip ? 180deg : 0deg;
    }
    ta := TouchArea {
        clicked => {
            root.clicked();
        }
    }
    states [
        down when ta.pressed: {
            background: #0006;
            in-out {
                animate background { duration: 50ms; }
            }
        }
        active when !ta.has-hover: {
            background: transparent;
        }
        active-hover when ta.has-hover: {
            background: #0004;
            in {
                animate background { duration: 500ms; easing: ease-out-quint; }
            }
            out {
                animate background { duration: 500ms; easing: ease-in; }
            }
        }
    ]
}

export component CanvasWindow inherits Window {
    in property<float> horizontal_padding_ratio: 0.1;
    in property<float> top_padding_ratio: 0.1;
    in property<float> bottom_padding_ratio: 0.1;
    out property<duration> tick: animation-tick();
    in property<image> art_image;
    in property<string> track_artist: "Artist";
    in property<string> track_title: "Title";
    in property<string> track_album: "Album";
    in property<bool> playing: false;
    callback previous();
    callback play_pause();
    callback next();

    title: "Beskope";
    background: transparent;
    preferred-width: 800px;
    preferred-height: 800px;

    VerticalBox {
        x: parent.width * horizontal_padding_ratio;
        y: parent.height * top_padding_ratio;
        width: parent.width - self.x * 2;
        height: parent.height - parent.height * (bottom_padding_ratio + top_padding_ratio);
        Rectangle {}

        cache-rendering-hint: true;
        Image {
            source: art_image;
        }

        Text {
            text: track_artist;
            font-size: 20px;
            horizontal-alignment: center;
        }
        Text {
            text: track_title;
            font-size: 20px;
            font-weight: 800;
            horizontal-alignment: center;
        }
        Text {
            text: track_album;
            font-size: 20px;
            horizontal-alignment: center;
            color: #222
            ;
        }

        HorizontalBox {
        Rectangle {}
            SvgButton {
                source: @image-url("icons/first-track-multimedia-button-svgrepo-com.svg");
                clicked => previous();
            }
            SvgButton {
                source: playing
                    ? @image-url("icons/pause-two-lines-svgrepo-com.svg")
                    : @image-url("icons/play-arrow-svgrepo-com.svg");
                clicked => play_pause();
            }
            SvgButton {
                source: @image-url("icons/first-track-multimedia-button-svgrepo-com.svg");
                flip: true;
                clicked => next();
            }
        Rectangle {}
        }

        Rectangle {}
    }
}
