import { VerticalBox, Slider, HorizontalBox, GroupBox, TabWidget } from "std-widgets.slint";

export global Configuration {
    callback changed();

    in-out property<color> fill_color: Colors.rgba(32, 32, 32, 0.7);
    in-out property<color> stroke_color: Colors.rgba(255, 255, 255, 0.8);
}

component LabeledSlider {
    in-out property<float> value <=> slider.value;
    in property<string> label <=> text.text;
    in property<float> minimum <=> slider.minimum;
    in property<float> maximum <=> slider.maximum;
    callback changed(float);
    HorizontalBox {
        text := Text {
            vertical-alignment: TextVerticalAlignment.center;
        }
        slider := Slider {
            changed(value) => { changed(value) }
        }
        Text {
            width: 10%;
            text: round(value*100)/100;
            vertical-alignment: TextVerticalAlignment.center;
            horizontal-alignment: TextHorizontalAlignment.left;
        }
    }
}

component HsvColorSelection inherits GroupBox {
    in-out property<float> h <=> h_slider.value;
    in-out property<float> s <=> s_slider.value;
    in-out property<float> v <=> v_slider.value;
    in-out property<float> a <=> a_slider.value;
    callback changed();
    VerticalBox {
        h_slider := LabeledSlider {
            label: "H";
            maximum: 359.999;
            changed(value) => { changed() }
        }
        s_slider := LabeledSlider {
            label: "S";
            maximum: 1.0;
            changed(value) => { changed() }
        }
        v_slider := LabeledSlider {
            label: "V";
            maximum: 1.0;
            changed(value) => { changed() }
        }
        a_slider := LabeledSlider {
            label: "A";
            maximum: 1.0;
            changed(value) => { changed() }
        }
    }
}

export component ConfigurationWindow inherits Window {
    function update_configuration() {
        Configuration.fill_color = Colors.hsv(fill_color.h, fill_color.s, fill_color.v, fill_color.a);
        Configuration.stroke_color = Colors.hsv(stroke_color.h, stroke_color.s, stroke_color.v, stroke_color.a);
        Configuration.changed();
    }

    preferred-width: 800px;
    preferred-height: 600px;

    TabWidget {
        Tab {
            title: "Color";
            VerticalBox {
                fill_color := HsvColorSelection {
                    changed => { update_configuration(); }
                    title: "Fill";
                    h: Configuration.fill_color.to_hsv().hue;
                    s: Configuration.fill_color.to_hsv().saturation;
                    v: Configuration.fill_color.to_hsv().value;
                    a: Configuration.fill_color.to_hsv().alpha;
                }
                stroke_color := HsvColorSelection {
                    title: "Stroke";
                    changed => { update_configuration(); }
                    h: Configuration.stroke_color.to_hsv().hue;
                    s: Configuration.stroke_color.to_hsv().saturation;
                    v: Configuration.stroke_color.to_hsv().value;
                    a: Configuration.stroke_color.to_hsv().alpha;
                }
            }
        }
        Tab {
            title: "Test";
        }
    }
}
