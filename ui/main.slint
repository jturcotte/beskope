import { VerticalBox, Slider, HorizontalBox, GroupBox, TabWidget, ComboBox, LineEdit, GridBox, AboutSlint, Palette, StandardButton } from "std-widgets.slint";

@rust-attr(derive(serde::Serialize, serde::Deserialize))
enum Style {
    Ridgeline,
    Compressed,
}

@rust-attr(derive(serde::Serialize, serde::Deserialize))
enum RenderChannels {
    Single,
    Both,
}

@rust-attr(derive(serde::Serialize, serde::Deserialize))
enum PanelLayout {
    TwoPanels,
    SingleTop,
    SingleBottom,
}

@rust-attr(derive(serde::Serialize, serde::Deserialize))
enum PanelLayer {
    Overlay,
    Top,
    Bottom,
    Background,
}

@rust-attr(derive(serde::Serialize, serde::Deserialize))
struct ControlPoint {
    t: float,
    v: float,
}

export global Backend {
    callback style_changed(Style);
    callback panel_layout_changed(PanelLayout);
    callback panel_channels_changed(RenderChannels);
    callback ridgeline_panel_layer_changed(PanelLayer);
    callback ridgeline_panel_width_changed(int);
    callback ridgeline_panel_exclusive_ratio_changed(float);
    callback ridgeline_fill_color_changed(color);
    callback ridgeline_highlight_color_changed(color);
    callback ridgeline_stroke_color_changed(color);
    callback compressed_panel_layer_changed(PanelLayer);
    callback compressed_panel_width_changed(int);
    callback compressed_panel_exclusive_ratio_changed(float);
    callback compressed_fill_color_changed(color);
    callback compressed_stroke_color_changed(color);
    callback compressed_time_curve_control_points_changed([ControlPoint]);
}

export global TimeCurveEditor {
    // Callbacks to edit the model from Rust
    callback change_point([ControlPoint], int, ControlPoint);
    callback add_point([ControlPoint], ControlPoint);
    callback remove_point([ControlPoint], int);

    pure callback draw_curve([ControlPoint], length, length) -> string;
}

component LabeledSlider {
    in-out property<float> value <=> slider.value;
    in property<string> label <=> text.text;
    in property<float> minimum <=> slider.minimum;
    in property<float> maximum <=> slider.maximum;
    in property<float> precision: 100;
    in property<string> unit: "";
    callback changed(float);
    HorizontalBox {
        text := Text {
            vertical-alignment: TextVerticalAlignment.center;
        }
        slider := Slider {
            changed(value) => { changed(value) }
        }
        Text {
            width: 10%;
            text: round(value*precision)/precision + root.unit;
            vertical-alignment: TextVerticalAlignment.center;
            horizontal-alignment: TextHorizontalAlignment.left;
        }
    }
}


component HsvColorSelection inherits GroupBox {
    callback set_color(color);
    set_color(color) => {
        h.value = color.to_hsv().hue;
        s.value = color.to_hsv().saturation;
        v.value = color.to_hsv().value;
        a.value = color.to_hsv().alpha;
    }

    callback changed(color);
    VerticalBox {
        h := LabeledSlider {
            label: "H";
            maximum: 359.999;
            changed(value) => { changed(Colors.hsv(h.value, s.value, v.value, a.value)) }
        }
        s := LabeledSlider {
            label: "S";
            maximum: 1.0;
            changed(value) => { changed(Colors.hsv(h.value, s.value, v.value, a.value)) }
        }
        v := LabeledSlider {
            label: "V";
            maximum: 1.0;
            changed(value) => { changed(Colors.hsv(h.value, s.value, v.value, a.value)) }
        }
        a := LabeledSlider {
            label: "A";
            maximum: 1.0;
            changed(value) => { changed(Colors.hsv(h.value, s.value, v.value, a.value)) }
        }
    }
}

component RidgelineSettings inherits GridBox {
    callback set_panel_layer <=> layer_cb.set_panel_layer;
    callback set_panel_width <=> panel_width_slider.set_panel_width;
    callback set_panel_exclusive_ratio <=> panel_exclusive_ratio_slider.set_panel_exclusive_ratio;
    callback set_fill_color <=> fill_color.set_color;
    callback set_highlight_color <=> highlight_color.set_color;
    callback set_stroke_color <=> stroke_color.set_color;

    Row {
        Text {
            text: "Panel Layer";
            vertical-alignment: TextVerticalAlignment.center;
        }
        layer_cb := ComboBox {
            model: [
                "Overlay",
                "Top",
                "Bottom",
                "Background",
            ];
            selected(current-value) => {
                if (self.current-index == 0) {
                    Backend.ridgeline_panel_layer_changed(PanelLayer.Overlay);
                } else if (self.current-index == 1) {
                    Backend.ridgeline_panel_layer_changed(PanelLayer.Top);
                } else if (self.current-index == 2) {
                    Backend.ridgeline_panel_layer_changed(PanelLayer.Bottom);
                } else {
                    Backend.ridgeline_panel_layer_changed(PanelLayer.Background);
                }
            }
            callback set_panel_layer(PanelLayer);
            set_panel_layer(layer) => {
                if (layer == PanelLayer.Overlay) {
                    self.current-index = 0;
                } else if (layer == PanelLayer.Top) {
                    self.current-index = 1;
                } else if (layer == PanelLayer.Bottom) {
                    self.current-index = 2;
                } else {
                    self.current-index = 3;
                }
            }
        }
    }
    Row {
        Text { text: "Height/Width"; }
        panel_width_slider := LabeledSlider {
            callback set_panel_width(int);
            minimum: 1;
            maximum: 800;
            precision: 1;
            unit: " px";
            changed => {
                Backend.ridgeline_panel_width_changed(self.value);
            }
            set_panel_width(width) => {
                self.value = width;
            }
        }
    }
    Row {
        Text { text: "Height/Width Exclusive"; }
        panel_exclusive_ratio_slider := LabeledSlider {
            minimum: 0;
            maximum: 100;
            precision: 1;
            unit: " %";
            changed => {
                Backend.ridgeline_panel_exclusive_ratio_changed(self.value / 100);
            }
            callback set_panel_exclusive_ratio(float);
            set_panel_exclusive_ratio(ratio) => {
                self.value = ratio * 100;
            }
        }
    }
    Row {
        Rectangle {
            colspan: 2;
            vertical-stretch: 0;
            HorizontalLayout {
                fill_color := HsvColorSelection {
                    width: 33%;
                    changed(color) => { Backend.ridgeline_fill_color_changed(color); }
                    title: "Base Fill Color";
                }
                highlight_color := HsvColorSelection {
                    width: 33%;
                    title: "Highlight Fill Color";
                    changed(color) => { Backend.ridgeline_highlight_color_changed(color); }
                }
                stroke_color := HsvColorSelection {
                    width: 33%;
                    title: "Stroke Color";
                    changed(color) => { Backend.ridgeline_stroke_color_changed(color); }
                }
            }
        }
    }
    Rectangle { }
}

component CompressedSettings inherits GridBox {
    callback set_panel_layer <=> layer_cb.set_panel_layer;
    callback set_panel_width <=> panel_width_slider.set_panel_width;
    callback set_panel_exclusive_ratio <=> panel_exclusive_ratio_slider.set_panel_exclusive_ratio;
    callback set_fill_color <=> fill_color.set_color;
    callback set_stroke_color <=> stroke_color.set_color;

    Row {
        Text {
            text: "Panel Layer";
            vertical-alignment: TextVerticalAlignment.center;
        }
        layer_cb := ComboBox {
            model: [
                "Overlay",
                "Top",
                "Bottom",
                "Background",
            ];
            selected(current-value) => {
                if (self.current-index == 0) {
                    Backend.compressed_panel_layer_changed(PanelLayer.Overlay);
                } else if (self.current-index == 1) {
                    Backend.compressed_panel_layer_changed(PanelLayer.Top);
                } else if (self.current-index == 2) {
                    Backend.compressed_panel_layer_changed(PanelLayer.Bottom);
                } else {
                    Backend.compressed_panel_layer_changed(PanelLayer.Background);
                }
            }
            callback set_panel_layer(PanelLayer);
            set_panel_layer(layer) => {
                if (layer == PanelLayer.Overlay) {
                    self.current-index = 0;
                } else if (layer == PanelLayer.Top) {
                    self.current-index = 1;
                } else if (layer == PanelLayer.Bottom) {
                    self.current-index = 2;
                } else {
                    self.current-index = 3;
                }
            }
        }
    }
    Row {
        Text { text: "Height/Width"; }
        panel_width_slider := LabeledSlider {
            callback set_panel_width(int);
            minimum: 1;
            maximum: 800;
            precision: 1;
            unit: " px";
            changed => {
                Backend.compressed_panel_width_changed(self.value);
            }
            set_panel_width(width) => {
                self.value = width;
            }
        }
    }
    Row {
        Text { text: "Height/Width Exclusive"; }
        panel_exclusive_ratio_slider := LabeledSlider {
            minimum: 0;
            maximum: 100;
            precision: 1;
            unit: " %";
            changed => {
                Backend.compressed_panel_exclusive_ratio_changed(self.value / 100);
            }
            callback set_panel_exclusive_ratio(float);
            set_panel_exclusive_ratio(ratio) => {
                self.value = ratio * 100;
            }
        }
    }
    Row {
        Rectangle {
            colspan: 2;
            vertical-stretch: 0;
            HorizontalLayout {
                fill_color := HsvColorSelection {
                    width: 50%;
                    changed(color) => { Backend.compressed_fill_color_changed(color); }
                    title: "Fill Color";
                }
                stroke_color := HsvColorSelection {
                    title: "Stroke Color";
                    changed(color) => { Backend.compressed_stroke_color_changed(color); }
                }
            }
        }
    }
    Rectangle { }
}

component ControlPointHandle inherits TouchArea {
    in property<string> label;
    height: 40px;
    width: 40px;
    Rectangle {
        background:
            parent.pressed
                ? Palette.selection-background.with-alpha(0.75)
                : parent.has-hover
                    ? Palette.control-background.with-alpha(0.75)
                    : Palette.control-background.with-alpha(0.4);
        width: 50%;
        height: 50%;
        border-radius: 8px;
        border-color: Palette.control-foreground;
        border-width: 1px;
    }
    Text {
        x: -self.width;
        visible: parent.has-hover || parent.pressed;
        text: label;
        horizontal-alignment: TextHorizontalAlignment.right;
        color: Palette.selection-background;
    }
}

component TimeCurveTab inherits VerticalBox {
    // Must match VERTEX_BUFFER_SIZE for now
    private property<float> time_curve_min_t: -3;

    in property<[ControlPoint]> time_curve_control_points;
    // Only when the whole model is changed by load_configuration
    changed time_curve_control_points => {
        Backend.compressed_time_curve_control_points_changed(time_curve_control_points);
    }

    TouchArea {
        pointer-event(e) => {
            if e.kind == PointerEventKind.down && e.button == PointerEventButton.left {
                TimeCurveEditor.add_point(
                    time_curve_control_points,
                    {
                        t: time_curve_min_t * (1.0 - (self.mouse-x / self.width)),
                        v: 1.0 - self.mouse-y / self.height,
                    }
                );
                Backend.compressed_time_curve_control_points_changed(time_curve_control_points);
                path.dummy_dep = !path.dummy_dep;
            } else if e.kind == PointerEventKind.move && self.pressed {
                // The just added point is the last one.
                TimeCurveEditor.change_point(
                    time_curve_control_points,
                    time_curve_control_points.length - 1,
                    {
                        t: time_curve_min_t * (1.0 - max(0.0, min(1.0, (self.mouse-x / self.width)))),
                        v: 1.0 - max(0.0, min(1.0, self.mouse-y / self.height)),
                    }
                );
                Backend.compressed_time_curve_control_points_changed(time_curve_control_points);
                path.dummy_dep = !path.dummy_dep;
            }
        }

        path := Path {
            stroke: Palette.accent-background;
            stroke-width: 5px;
            viewbox-width: (self.width - self.stroke-width) / 1px;
            viewbox-height: (self.height - self.stroke-width) / 1px;
            clip: true;

            // This is just to dirty the commands binding so that draw_curve gets called again.
            private property<bool> dummy_dep: false;

            commands: TimeCurveEditor.draw_curve(time_curve_control_points, dummy_dep ? self.width : self.width, self.height);
        }
        Rectangle {
            border-color: Palette.alternate-foreground;
            border-width: 2px;
        }
        for cp[i] in time_curve_control_points:
        ControlPointHandle {
            x: (1.0 - cp.t / time_curve_min_t) * parent.width - self.width / 2.0;
            y: (1.0 - cp.v) * parent.height - self.height / 2.0;
            label: round(cp.t * 1000) / 1000 + "s: " + cp.v;
            moved => {
                TimeCurveEditor.change_point(
                    time_curve_control_points,
                    i,
                    {
                        t: time_curve_min_t * (1.0 - max(0.0, min(1.0, (self.x + self.width / 2.0 + self.mouse-x - self.pressed-x) / parent.width))),
                        v: max(0.0, min(1.0, 1.0 - (self.y + self.height / 2.0 + self.mouse-y - self.pressed-y) / parent.height)),
                    }
                );
                Backend.compressed_time_curve_control_points_changed(time_curve_control_points);
                path.dummy_dep = !path.dummy_dep;
            }
            pointer-event(e) => {
                if e.kind == PointerEventKind.down && e.button == PointerEventButton.right {
                    TimeCurveEditor.remove_point(time_curve_control_points, i);
                    Backend.compressed_time_curve_control_points_changed(time_curve_control_points);
                    path.dummy_dep = !path.dummy_dep;
                }
            }
        }
    }
}

export component ConfigurationWindow inherits Dialog {
    // Callbacks to update the dialog from the application's state
    callback set_style <=> style_cb.set_style;
    callback set_panel_layout <=> layout_cb.set_panel_layout;
    callback set_panel_channels <=> channels_cb.set_panel_channels;
    callback set_ridgeline_panel_layer <=> ridgeline_tab.set_panel_layer;
    callback set_ridgeline_panel_width <=> ridgeline_tab.set_panel_width;
    callback set_ridgeline_panel_exclusive_ratio <=> ridgeline_tab.set_panel_exclusive_ratio;
    callback set_ridgeline_fill_color <=> ridgeline_tab.set_fill_color;
    callback set_ridgeline_highlight_color <=> ridgeline_tab.set_highlight_color;
    callback set_ridgeline_stroke_color <=> ridgeline_tab.set_stroke_color;
    callback set_compressed_panel_layer <=> compressed_tab.set_panel_layer;
    callback set_compressed_panel_width <=> compressed_tab.set_panel_width;
    callback set_compressed_panel_exclusive_ratio <=> compressed_tab.set_panel_exclusive_ratio;
    callback set_compressed_fill_color <=> compressed_tab.set_fill_color;
    callback set_compressed_stroke_color <=> compressed_tab.set_stroke_color;
    callback set_compressed_time_curve_control_points([ControlPoint]);
    set_compressed_time_curve_control_points(control_points) => {
        time_curve_tab.time_curve_control_points = control_points;
    }

    title: "Beskope Configuration";
    preferred-width: 800px;
    preferred-height: 600px;

    GridBox {
        Row {
            Text {
                text: "Style";
                vertical-alignment: TextVerticalAlignment.center;
            }
            style_cb := ComboBox {
                model: [
                    "Ridgeline Plot",
                    "Compressed Line",
                ];
                selected(current-value) => {
                    Backend.style_changed(self.current-index == 0 ? Style.Ridgeline : Style.Compressed);
                }
                callback set_style(Style);
                set_style(style) => {
                    if (style == Style.Ridgeline) {
                        self.current-index = 0;
                    } else {
                        self.current-index = 1;
                    }
                }
            }
        }
        Row {
            Text {
                text: "Panel layout";
                vertical-alignment: TextVerticalAlignment.center;
            }
            layout_cb := ComboBox {
                model: [
                    "Two panels (one on each side of the screen)",
                    "Single panel at the top",
                    "Single panel at the bottom",
                ];
                selected(current-value) => {
                    if (self.current-index == 0) {
                        channels_cb.enabled = false;
                        channels_cb.current-index = 0;
                    } else {
                        channels_cb.enabled = true;
                    }

                    if (self.current-index == 0) {
                        Backend.panel_layout_changed(PanelLayout.TwoPanels);
                    } else if (self.current-index == 1) {
                        Backend.panel_layout_changed(PanelLayout.SingleTop);
                    } else {
                        Backend.panel_layout_changed(PanelLayout.SingleBottom);
                    }
                }
                callback set_panel_layout(PanelLayout);
                set_panel_layout(layout) => {
                    if (layout == PanelLayout.TwoPanels) {
                        self.current-index = 0;
                    } else if (layout == PanelLayout.SingleTop) {
                        self.current-index = 1;
                    } else {
                        self.current-index = 2;
                    }
                }
            }
        }
        Row {
            Text {
                text: "Channels per window/panel";
                vertical-alignment: TextVerticalAlignment.center;
            }
            channels_cb := ComboBox {
                enabled: layout_cb.current-value != "Two panels (one on each side of the screen)";
                model: [
                    "Only left",
                    "Both left and right",
                ];
                selected(current-value) => {
                    if (self.current-index == 0) {
                        Backend.panel_channels_changed(RenderChannels.Single);
                    } else {
                        Backend.panel_channels_changed(RenderChannels.Both);
                    }
                }
                callback set_panel_channels(RenderChannels);
                set_panel_channels(channels) => {
                    if (channels == RenderChannels.Single) {
                        self.current-index = 0;
                    } else {
                        self.current-index = 1;
                    }
                }
            }
        }
        Row {
            TabWidget {
                colspan: 2;
                Tab {
                    title: "Ridgeline Plot Settings";
                    ridgeline_tab := RidgelineSettings { }
                }
                Tab {
                    title: "Compressed Line Settings";
                    compressed_tab := CompressedSettings { }
                }
                Tab {
                    title: "Compressed Line Time Curve";
                    time_curve_tab := TimeCurveTab { }
                }
            }
        }
    }
    StandardButton {
        kind: StandardButtonKind.ok;
    }
    StandardButton {
        kind: StandardButtonKind.cancel;
    }
}
